{"ast":null,"code":"import * as React from 'react';\nimport { useContext, useMemo } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ThemeContext = /*#__PURE__*/React.createContext({\n  prefixes: {}\n});\nconst {\n  Consumer,\n  Provider\n} = ThemeContext;\n\nfunction ThemeProvider(_ref) {\n  let {\n    prefixes = {},\n    dir,\n    children\n  } = _ref;\n  const contextValue = useMemo(() => ({\n    prefixes: { ...prefixes\n    },\n    dir\n  }), [prefixes, dir]);\n  return /*#__PURE__*/_jsx(Provider, {\n    value: contextValue,\n    children: children\n  });\n}\n\nexport function useBootstrapPrefix(prefix, defaultPrefix) {\n  const {\n    prefixes\n  } = useContext(ThemeContext);\n  return prefix || prefixes[defaultPrefix] || defaultPrefix;\n}\nexport function useIsRTL() {\n  const {\n    dir\n  } = useContext(ThemeContext);\n  return dir === 'rtl';\n}\n\nfunction createBootstrapComponent(Component, opts) {\n  if (typeof opts === 'string') opts = {\n    prefix: opts\n  };\n  const isClassy = Component.prototype && Component.prototype.isReactComponent; // If it's a functional component make sure we don't break it with a ref\n\n  const {\n    prefix,\n    forwardRefAs = isClassy ? 'ref' : 'innerRef'\n  } = opts;\n  const Wrapped = /*#__PURE__*/React.forwardRef((_ref2, ref) => {\n    let { ...props\n    } = _ref2;\n    props[forwardRefAs] = ref;\n    const bsPrefix = useBootstrapPrefix(props.bsPrefix, prefix);\n    return /*#__PURE__*/_jsx(Component, { ...props,\n      bsPrefix: bsPrefix\n    });\n  });\n  Wrapped.displayName = `Bootstrap(${Component.displayName || Component.name})`;\n  return Wrapped;\n}\n\nexport { createBootstrapComponent, Consumer as ThemeConsumer };\nexport default ThemeProvider;","map":{"version":3,"sources":["C:/Users/jaidy/Documents/school/PAW-project/paw/node_modules/react-bootstrap/esm/ThemeProvider.js"],"names":["React","useContext","useMemo","jsx","_jsx","ThemeContext","createContext","prefixes","Consumer","Provider","ThemeProvider","dir","children","contextValue","value","useBootstrapPrefix","prefix","defaultPrefix","useIsRTL","createBootstrapComponent","Component","opts","isClassy","prototype","isReactComponent","forwardRefAs","Wrapped","forwardRef","ref","props","bsPrefix","displayName","name","ThemeConsumer"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,OAApC;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,MAAMC,YAAY,GAAG,aAAaL,KAAK,CAACM,aAAN,CAAoB;AACpDC,EAAAA,QAAQ,EAAE;AAD0C,CAApB,CAAlC;AAGA,MAAM;AACJC,EAAAA,QADI;AAEJC,EAAAA;AAFI,IAGFJ,YAHJ;;AAKA,SAASK,aAAT,OAIG;AAAA,MAJoB;AACrBH,IAAAA,QAAQ,GAAG,EADU;AAErBI,IAAAA,GAFqB;AAGrBC,IAAAA;AAHqB,GAIpB;AACD,QAAMC,YAAY,GAAGX,OAAO,CAAC,OAAO;AAClCK,IAAAA,QAAQ,EAAE,EAAE,GAAGA;AAAL,KADwB;AAGlCI,IAAAA;AAHkC,GAAP,CAAD,EAIxB,CAACJ,QAAD,EAAWI,GAAX,CAJwB,CAA5B;AAKA,SAAO,aAAaP,IAAI,CAACK,QAAD,EAAW;AACjCK,IAAAA,KAAK,EAAED,YAD0B;AAEjCD,IAAAA,QAAQ,EAAEA;AAFuB,GAAX,CAAxB;AAID;;AAED,OAAO,SAASG,kBAAT,CAA4BC,MAA5B,EAAoCC,aAApC,EAAmD;AACxD,QAAM;AACJV,IAAAA;AADI,MAEFN,UAAU,CAACI,YAAD,CAFd;AAGA,SAAOW,MAAM,IAAIT,QAAQ,CAACU,aAAD,CAAlB,IAAqCA,aAA5C;AACD;AACD,OAAO,SAASC,QAAT,GAAoB;AACzB,QAAM;AACJP,IAAAA;AADI,MAEFV,UAAU,CAACI,YAAD,CAFd;AAGA,SAAOM,GAAG,KAAK,KAAf;AACD;;AAED,SAASQ,wBAAT,CAAkCC,SAAlC,EAA6CC,IAA7C,EAAmD;AACjD,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8BA,IAAI,GAAG;AACnCL,IAAAA,MAAM,EAAEK;AAD2B,GAAP;AAG9B,QAAMC,QAAQ,GAAGF,SAAS,CAACG,SAAV,IAAuBH,SAAS,CAACG,SAAV,CAAoBC,gBAA5D,CAJiD,CAI6B;;AAE9E,QAAM;AACJR,IAAAA,MADI;AAEJS,IAAAA,YAAY,GAAGH,QAAQ,GAAG,KAAH,GAAW;AAF9B,MAGFD,IAHJ;AAIA,QAAMK,OAAO,GAAG,aAAa1B,KAAK,CAAC2B,UAAN,CAAiB,QAC3CC,GAD2C,KACnC;AAAA,QADoC,EAAE,GAAGC;AAAL,KACpC;AACTA,IAAAA,KAAK,CAACJ,YAAD,CAAL,GAAsBG,GAAtB;AACA,UAAME,QAAQ,GAAGf,kBAAkB,CAACc,KAAK,CAACC,QAAP,EAAiBd,MAAjB,CAAnC;AACA,WAAO,aAAaZ,IAAI,CAACgB,SAAD,EAAY,EAAE,GAAGS,KAAL;AAClCC,MAAAA,QAAQ,EAAEA;AADwB,KAAZ,CAAxB;AAGD,GAP4B,CAA7B;AAQAJ,EAAAA,OAAO,CAACK,WAAR,GAAuB,aAAYX,SAAS,CAACW,WAAV,IAAyBX,SAAS,CAACY,IAAK,GAA3E;AACA,SAAON,OAAP;AACD;;AAED,SAASP,wBAAT,EAAmCX,QAAQ,IAAIyB,aAA/C;AACA,eAAevB,aAAf","sourcesContent":["import * as React from 'react';\r\nimport { useContext, useMemo } from 'react';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nconst ThemeContext = /*#__PURE__*/React.createContext({\r\n  prefixes: {}\r\n});\r\nconst {\r\n  Consumer,\r\n  Provider\r\n} = ThemeContext;\r\n\r\nfunction ThemeProvider({\r\n  prefixes = {},\r\n  dir,\r\n  children\r\n}) {\r\n  const contextValue = useMemo(() => ({\r\n    prefixes: { ...prefixes\r\n    },\r\n    dir\r\n  }), [prefixes, dir]);\r\n  return /*#__PURE__*/_jsx(Provider, {\r\n    value: contextValue,\r\n    children: children\r\n  });\r\n}\r\n\r\nexport function useBootstrapPrefix(prefix, defaultPrefix) {\r\n  const {\r\n    prefixes\r\n  } = useContext(ThemeContext);\r\n  return prefix || prefixes[defaultPrefix] || defaultPrefix;\r\n}\r\nexport function useIsRTL() {\r\n  const {\r\n    dir\r\n  } = useContext(ThemeContext);\r\n  return dir === 'rtl';\r\n}\r\n\r\nfunction createBootstrapComponent(Component, opts) {\r\n  if (typeof opts === 'string') opts = {\r\n    prefix: opts\r\n  };\r\n  const isClassy = Component.prototype && Component.prototype.isReactComponent; // If it's a functional component make sure we don't break it with a ref\r\n\r\n  const {\r\n    prefix,\r\n    forwardRefAs = isClassy ? 'ref' : 'innerRef'\r\n  } = opts;\r\n  const Wrapped = /*#__PURE__*/React.forwardRef(({ ...props\r\n  }, ref) => {\r\n    props[forwardRefAs] = ref;\r\n    const bsPrefix = useBootstrapPrefix(props.bsPrefix, prefix);\r\n    return /*#__PURE__*/_jsx(Component, { ...props,\r\n      bsPrefix: bsPrefix\r\n    });\r\n  });\r\n  Wrapped.displayName = `Bootstrap(${Component.displayName || Component.name})`;\r\n  return Wrapped;\r\n}\r\n\r\nexport { createBootstrapComponent, Consumer as ThemeConsumer };\r\nexport default ThemeProvider;"]},"metadata":{},"sourceType":"module"}